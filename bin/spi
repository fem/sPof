#!/bin/bash

if [ "$(basename $(pwd))" = "bin" ]; then
  BASE=$(dirname $(pwd))
else
  BASE=`pwd`
fi;

if [ "$USER" = "cruisecontrol" ]; then
    BASEGROUP="cruisecontrol"
else
    BASEGROUP="spi"
fi;

case "$1" in
  check)
#    for filename in `find /var/www/spi1-test/spi-v1-$USER -name '*.php' -type f -print -and ! -path '/var/www/spi1-test/spi-v1-$USER/core/vendor/*' -and ! -path '/var/www/spi1-test/spi-v1-$USER/bin/*' -and ! -path '/var/www/spi1-test/spi-v1-$USER/cqa/*'`; do
    for filename in `find $BASE -name '*.php' -type f -print`; do
      php -l $filename \
      | grep -v "No syntax errors detected in" \
      | grep -v "Errors parsing"
      if [[ !($filename =~ "bin") && !($filename =~ "vendor") && !($filename =~ "cqa") && !($filename =~ "tests") && !($filename =~ 'smarty_plugins') && !($filename =~ "migration") && !($filename =~ "public") ]]; then
        php -r "include_once 'core/bootstrap.php'; include_once '$filename';"
      fi
    done;
    echo "done checking"
    ;;

  update)
    svn $* $BASE

    # run composer stuff
    export COMPOSER_VENDOR_DIR="$BASE/core/vendor/composer/"
    if [ -f "$BASE/composer.lock" ]; then
      $BASE/composer.phar self-update
      php "$BASE/composer.phar" update
    else
      if [ -f "$BASE/composer.phar" ]; then
        $BASE/composer.phar self-update
      else
        curl -sS https://getcomposer.org/installer | php
      fi
      php "$BASE/composer.phar" install
    fi

    cd $BASE/core/vendor/

    echo
    echo "get pChart from the web:"
    if [ -d "pChart" ]; then
      # to lazy for negation
      echo "pChart is already latest Version"
    else
      PCHART_VERSION=2.1.3
      wget http://www.pchart.net/release/pChart${PCHART_VERSION}.tar.gz
      tar -xvzf pChart${PCHART_VERSION}.tar.gz
      mv pChart${PCHART_VERSION} pChart
      rm pChart${PCHART_VERSION}.tar.gz
    fi

    chmod 775 $BASE/public/


    chown --quiet $USER:$BASEGROUP -R $BASE
    echo
    echo "finished updating"
    ;;

  commit)
    if [ $# -gt 1 ]; then
      echo "$*" | sed s/$1\ // | xargs svn ci
    else
      svn ci
    fi
    ;;

  clear_smarty)
    path=`echo $BASE | sed "s/.*$USER/$USER/" | sed 's/spi-branches/branches/' | sed 's#\/spi$##'`
    echo $path
    find /var/www/spi-next/tmp/$path/smarty_compile/ -type f \
    | xargs rm
    echo "done clearing smarty cache"
    ;;

  search)
    grep -ris --exclude-dir="public" $2 * \
    | grep -v \\.svn \
    | sed ''/$2/s//$(printf "\033[1;31m$2\033[0m")/'' \
    | sed ''/:/s//$(printf ":\033[0m")/'' \
    | sed ''s/^/$(printf "\033[0;35m")/''
    ;;

  test)
    phpunit --bootstrap ${BASE}/core/bootstrap.php ${BASE}/tests/
    ;;

  validate)
    phpmd . text ${BASE}/cqa/phpmd.xml --exclude ${BASE}/core/vendor,${BASE}/bin/phptidy.php,${BASE}/cqa \
    | grep -v 'Unexpected token'
    phpcs --standard=${BASE}/cqa/checkstyle/Standards/sPi/ruleset.xml --extensions=php .
    ;;

  help)
    fname=$(basename $0)
    echo "usage: './$fname command'"
    echo "commands:"
    echo "      clear_smarty     clears smarty cache, should no longe be needed, but is"
    echo "                       kept here for lagacy"
    echo
    echo "      update           updates working copy while preserving rights for apache"
    echo
    echo "      commit           commit to svn repo (additional params are passed through),"
    echo "                       before the commit is pushed to the server the code"
    echo "                       formatting is done"
    echo
    echo "      search           search using, grep while skipping public directory (as it"
    echo "                       contains symlinks to really big directories)"
    echo
    echo "      test             runs phpunit tests from tests dir"
    echo
    echo "      validate         runs php mess detector and code sniffer on sourcecode the"
    echo "                       determine if the code is \"like specified\""
    echo
    echo "      check            checks sourcecode for syntax errors"
    echo
    echo "      help             shows this help"
    ;;

  unknown)
    echo "Unknown command '$2'"
    $0 help
    ;;

  *)
    $0 unknown $1
    ;;

esac

exit 0
